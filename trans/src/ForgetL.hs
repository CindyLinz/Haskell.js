module ForgetL where
import Language.Haskell.Exts.Annotated.Syntax
import Control.Arrow ((***))

forgetLActivation :: Activation l -> Activation ()
forgetLActivation (ActiveFrom l int) = ActiveFrom (id ()) (id int)
forgetLActivation (ActiveUntil l int) = ActiveUntil (id ()) (id int)
forgetLAlt :: Alt l -> Alt ()
forgetLAlt (Alt l pat rhs binds) = Alt (id ()) (forgetLPat pat) (forgetLRhs rhs) (fmap (forgetLBinds) binds)
forgetLAnnotation :: Annotation l -> Annotation ()
forgetLAnnotation (Ann l name exp) = Ann (id ()) (forgetLName name) (forgetLExp exp)
forgetLAnnotation (TypeAnn l name exp) = TypeAnn (id ()) (forgetLName name) (forgetLExp exp)
forgetLAnnotation (ModuleAnn l exp) = ModuleAnn (id ()) (forgetLExp exp)
forgetLAssoc :: Assoc l -> Assoc ()
forgetLAssoc (AssocNone l) = AssocNone (id ())
forgetLAssoc (AssocLeft l) = AssocLeft (id ())
forgetLAssoc (AssocRight l) = AssocRight (id ())
forgetLAsst :: Asst l -> Asst ()
forgetLAsst (ClassA l qName type0) = ClassA (id ()) (forgetLQName qName) (fmap (forgetLType) type0)
forgetLAsst (AppA l name type0) = AppA (id ()) (forgetLName name) (fmap (forgetLType) type0)
forgetLAsst (InfixA l type1 qName type2) = InfixA (id ()) (forgetLType type1) (forgetLQName qName) (forgetLType type2)
forgetLAsst (IParam l iPName type0) = IParam (id ()) (forgetLIPName iPName) (forgetLType type0)
forgetLAsst (EqualP l type1 type2) = EqualP (id ()) (forgetLType type1) (forgetLType type2)
forgetLAsst (ParenA l asst) = ParenA (id ()) (forgetLAsst asst)
forgetLAsst (WildCardA l name) = WildCardA (id ()) (fmap (forgetLName) name)
forgetLBangType :: BangType l -> BangType ()
forgetLBangType (BangedTy l) = BangedTy (id ())
forgetLBangType (UnpackedTy l) = UnpackedTy (id ())
forgetLBinds :: Binds l -> Binds ()
forgetLBinds (BDecls l decl) = BDecls (id ()) (fmap (forgetLDecl) decl)
forgetLBinds (IPBinds l iPBind) = IPBinds (id ()) (fmap (forgetLIPBind) iPBind)
forgetLBooleanFormula :: BooleanFormula l -> BooleanFormula ()
forgetLBooleanFormula (VarFormula l name) = VarFormula (id ()) (forgetLName name)
forgetLBooleanFormula (AndFormula l booleanFormula) = AndFormula (id ()) (fmap (forgetLBooleanFormula) booleanFormula)
forgetLBooleanFormula (OrFormula l booleanFormula) = OrFormula (id ()) (fmap (forgetLBooleanFormula) booleanFormula)
forgetLBooleanFormula (ParenFormula l booleanFormula) = ParenFormula (id ()) (forgetLBooleanFormula booleanFormula)
forgetLBoxed :: Boxed -> Boxed
forgetLBoxed (Boxed) = Boxed
forgetLBoxed (Unboxed) = Unboxed
forgetLBracket :: Bracket l -> Bracket ()
forgetLBracket (ExpBracket l exp) = ExpBracket (id ()) (forgetLExp exp)
forgetLBracket (PatBracket l pat) = PatBracket (id ()) (forgetLPat pat)
forgetLBracket (TypeBracket l type0) = TypeBracket (id ()) (forgetLType type0)
forgetLBracket (DeclBracket l decl) = DeclBracket (id ()) (fmap (forgetLDecl) decl)
forgetLCName :: CName l -> CName ()
forgetLCName (VarName l name) = VarName (id ()) (forgetLName name)
forgetLCName (ConName l name) = ConName (id ()) (forgetLName name)
forgetLCallConv :: CallConv l -> CallConv ()
forgetLCallConv (StdCall l) = StdCall (id ())
forgetLCallConv (CCall l) = CCall (id ())
forgetLCallConv (CPlusPlus l) = CPlusPlus (id ())
forgetLCallConv (DotNet l) = DotNet (id ())
forgetLCallConv (Jvm l) = Jvm (id ())
forgetLCallConv (Js l) = Js (id ())
forgetLCallConv (JavaScript l) = JavaScript (id ())
forgetLCallConv (CApi l) = CApi (id ())
forgetLClassDecl :: ClassDecl l -> ClassDecl ()
forgetLClassDecl (ClsDecl l decl) = ClsDecl (id ()) (forgetLDecl decl)
forgetLClassDecl (ClsDataFam l context declHead kind) = ClsDataFam (id ()) (fmap (forgetLContext) context) (forgetLDeclHead declHead) (fmap (forgetLKind) kind)
forgetLClassDecl (ClsTyFam l declHead kind) = ClsTyFam (id ()) (forgetLDeclHead declHead) (fmap (forgetLKind) kind)
forgetLClassDecl (ClsTyDef l type1 type2) = ClsTyDef (id ()) (forgetLType type1) (forgetLType type2)
forgetLClassDecl (ClsDefSig l name type0) = ClsDefSig (id ()) (forgetLName name) (forgetLType type0)
forgetLConDecl :: ConDecl l -> ConDecl ()
forgetLConDecl (ConDecl l name type0) = ConDecl (id ()) (forgetLName name) (fmap (forgetLType) type0)
forgetLConDecl (InfixConDecl l type1 name type2) = InfixConDecl (id ()) (forgetLType type1) (forgetLName name) (forgetLType type2)
forgetLConDecl (RecDecl l name fieldDecl) = RecDecl (id ()) (forgetLName name) (fmap (forgetLFieldDecl) fieldDecl)
forgetLContext :: Context l -> Context ()
forgetLContext (CxSingle l asst) = CxSingle (id ()) (forgetLAsst asst)
forgetLContext (CxTuple l asst) = CxTuple (id ()) (fmap (forgetLAsst) asst)
forgetLContext (CxEmpty l) = CxEmpty (id ())
forgetLDataOrNew :: DataOrNew l -> DataOrNew ()
forgetLDataOrNew (DataType l) = DataType (id ())
forgetLDataOrNew (NewType l) = NewType (id ())
forgetLDecl :: Decl l -> Decl ()
forgetLDecl (TypeDecl l declHead type0) = TypeDecl (id ()) (forgetLDeclHead declHead) (forgetLType type0)
forgetLDecl (TypeFamDecl l declHead kind) = TypeFamDecl (id ()) (forgetLDeclHead declHead) (fmap (forgetLKind) kind)
forgetLDecl (ClosedTypeFamDecl l declHead kind typeEqn) = ClosedTypeFamDecl (id ()) (forgetLDeclHead declHead) (fmap (forgetLKind) kind) (fmap (forgetLTypeEqn) typeEqn)
forgetLDecl (DataDecl l dataOrNew context declHead qualConDecl deriving0) = DataDecl (id ()) (forgetLDataOrNew dataOrNew) (fmap (forgetLContext) context) (forgetLDeclHead declHead) (fmap (forgetLQualConDecl) qualConDecl) (fmap (forgetLDeriving) deriving0)
forgetLDecl (GDataDecl l dataOrNew context declHead kind gadtDecl deriving0) = GDataDecl (id ()) (forgetLDataOrNew dataOrNew) (fmap (forgetLContext) context) (forgetLDeclHead declHead) (fmap (forgetLKind) kind) (fmap (forgetLGadtDecl) gadtDecl) (fmap (forgetLDeriving) deriving0)
forgetLDecl (DataFamDecl l context declHead kind) = DataFamDecl (id ()) (fmap (forgetLContext) context) (forgetLDeclHead declHead) (fmap (forgetLKind) kind)
forgetLDecl (TypeInsDecl l type1 type2) = TypeInsDecl (id ()) (forgetLType type1) (forgetLType type2)
forgetLDecl (DataInsDecl l dataOrNew type0 qualConDecl deriving0) = DataInsDecl (id ()) (forgetLDataOrNew dataOrNew) (forgetLType type0) (fmap (forgetLQualConDecl) qualConDecl) (fmap (forgetLDeriving) deriving0)
forgetLDecl (GDataInsDecl l dataOrNew type0 kind gadtDecl deriving0) = GDataInsDecl (id ()) (forgetLDataOrNew dataOrNew) (forgetLType type0) (fmap (forgetLKind) kind) (fmap (forgetLGadtDecl) gadtDecl) (fmap (forgetLDeriving) deriving0)
forgetLDecl (ClassDecl l context declHead funDep classDecl) = ClassDecl (id ()) (fmap (forgetLContext) context) (forgetLDeclHead declHead) (fmap (forgetLFunDep) funDep) (fmap (fmap (forgetLClassDecl)) classDecl)
forgetLDecl (InstDecl l overlap instRule instDecl) = InstDecl (id ()) (fmap (forgetLOverlap) overlap) (forgetLInstRule instRule) (fmap (fmap (forgetLInstDecl)) instDecl)
forgetLDecl (DerivDecl l overlap instRule) = DerivDecl (id ()) (fmap (forgetLOverlap) overlap) (forgetLInstRule instRule)
forgetLDecl (InfixDecl l assoc int op) = InfixDecl (id ()) (forgetLAssoc assoc) (fmap (id) int) (fmap (forgetLOp) op)
forgetLDecl (DefaultDecl l type0) = DefaultDecl (id ()) (fmap (forgetLType) type0)
forgetLDecl (SpliceDecl l exp) = SpliceDecl (id ()) (forgetLExp exp)
forgetLDecl (TypeSig l name type0) = TypeSig (id ()) (fmap (forgetLName) name) (forgetLType type0)
forgetLDecl (PatSynSig l name tyVarBind context1 context2 type0) = PatSynSig (id ()) (forgetLName name) (fmap (fmap (forgetLTyVarBind)) tyVarBind) (fmap (forgetLContext) context1) (fmap (forgetLContext) context2) (forgetLType type0)
forgetLDecl (FunBind l match) = FunBind (id ()) (fmap (forgetLMatch) match)
forgetLDecl (PatBind l pat rhs binds) = PatBind (id ()) (forgetLPat pat) (forgetLRhs rhs) (fmap (forgetLBinds) binds)
forgetLDecl (PatSyn l pat1 pat2 patternSynDirection) = PatSyn (id ()) (forgetLPat pat1) (forgetLPat pat2) (forgetLPatternSynDirection patternSynDirection)
forgetLDecl (ForImp l callConv safety string name type0) = ForImp (id ()) (forgetLCallConv callConv) (fmap (forgetLSafety) safety) (fmap (id) string) (forgetLName name) (forgetLType type0)
forgetLDecl (ForExp l callConv string name type0) = ForExp (id ()) (forgetLCallConv callConv) (fmap (id) string) (forgetLName name) (forgetLType type0)
forgetLDecl (RulePragmaDecl l rule) = RulePragmaDecl (id ()) (fmap (forgetLRule) rule)
forgetLDecl (DeprPragmaDecl l name) = DeprPragmaDecl (id ()) (fmap (((fmap (forgetLName)) *** (id))) name)
forgetLDecl (WarnPragmaDecl l name) = WarnPragmaDecl (id ()) (fmap (((fmap (forgetLName)) *** (id))) name)
forgetLDecl (InlineSig l bool activation qName) = InlineSig (id ()) (id bool) (fmap (forgetLActivation) activation) (forgetLQName qName)
forgetLDecl (InlineConlikeSig l activation qName) = InlineConlikeSig (id ()) (fmap (forgetLActivation) activation) (forgetLQName qName)
forgetLDecl (SpecSig l activation qName type0) = SpecSig (id ()) (fmap (forgetLActivation) activation) (forgetLQName qName) (fmap (forgetLType) type0)
forgetLDecl (SpecInlineSig l bool activation qName type0) = SpecInlineSig (id ()) (id bool) (fmap (forgetLActivation) activation) (forgetLQName qName) (fmap (forgetLType) type0)
forgetLDecl (InstSig l instRule) = InstSig (id ()) (forgetLInstRule instRule)
forgetLDecl (AnnPragma l annotation) = AnnPragma (id ()) (forgetLAnnotation annotation)
forgetLDecl (MinimalPragma l booleanFormula) = MinimalPragma (id ()) (fmap (forgetLBooleanFormula) booleanFormula)
forgetLDecl (RoleAnnotDecl l qName role) = RoleAnnotDecl (id ()) (forgetLQName qName) (fmap (forgetLRole) role)
forgetLDeclHead :: DeclHead l -> DeclHead ()
forgetLDeclHead (DHead l name) = DHead (id ()) (forgetLName name)
forgetLDeclHead (DHInfix l tyVarBind name) = DHInfix (id ()) (forgetLTyVarBind tyVarBind) (forgetLName name)
forgetLDeclHead (DHParen l declHead) = DHParen (id ()) (forgetLDeclHead declHead)
forgetLDeclHead (DHApp l declHead tyVarBind) = DHApp (id ()) (forgetLDeclHead declHead) (forgetLTyVarBind tyVarBind)
forgetLDeriving :: Deriving l -> Deriving ()
forgetLDeriving (Deriving l instRule) = Deriving (id ()) (fmap (forgetLInstRule) instRule)
forgetLExp :: Exp l -> Exp ()
forgetLExp (Var l qName) = Var (id ()) (forgetLQName qName)
forgetLExp (IPVar l iPName) = IPVar (id ()) (forgetLIPName iPName)
forgetLExp (Con l qName) = Con (id ()) (forgetLQName qName)
forgetLExp (Lit l literal) = Lit (id ()) (forgetLLiteral literal)
forgetLExp (InfixApp l exp1 qOp exp2) = InfixApp (id ()) (forgetLExp exp1) (forgetLQOp qOp) (forgetLExp exp2)
forgetLExp (App l exp1 exp2) = App (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (NegApp l exp) = NegApp (id ()) (forgetLExp exp)
forgetLExp (Lambda l pat exp) = Lambda (id ()) (fmap (forgetLPat) pat) (forgetLExp exp)
forgetLExp (Let l binds exp) = Let (id ()) (forgetLBinds binds) (forgetLExp exp)
forgetLExp (If l exp1 exp2 exp3) = If (id ()) (forgetLExp exp1) (forgetLExp exp2) (forgetLExp exp3)
forgetLExp (MultiIf l guardedRhs) = MultiIf (id ()) (fmap (forgetLGuardedRhs) guardedRhs)
forgetLExp (Case l exp alt) = Case (id ()) (forgetLExp exp) (fmap (forgetLAlt) alt)
forgetLExp (Do l stmt) = Do (id ()) (fmap (forgetLStmt) stmt)
forgetLExp (MDo l stmt) = MDo (id ()) (fmap (forgetLStmt) stmt)
forgetLExp (Tuple l boxed exp) = Tuple (id ()) (forgetLBoxed boxed) (fmap (forgetLExp) exp)
forgetLExp (TupleSection l boxed exp) = TupleSection (id ()) (forgetLBoxed boxed) (fmap (fmap (forgetLExp)) exp)
forgetLExp (List l exp) = List (id ()) (fmap (forgetLExp) exp)
forgetLExp (ParArray l exp) = ParArray (id ()) (fmap (forgetLExp) exp)
forgetLExp (Paren l exp) = Paren (id ()) (forgetLExp exp)
forgetLExp (LeftSection l exp qOp) = LeftSection (id ()) (forgetLExp exp) (forgetLQOp qOp)
forgetLExp (RightSection l qOp exp) = RightSection (id ()) (forgetLQOp qOp) (forgetLExp exp)
forgetLExp (RecConstr l qName fieldUpdate) = RecConstr (id ()) (forgetLQName qName) (fmap (forgetLFieldUpdate) fieldUpdate)
forgetLExp (RecUpdate l exp fieldUpdate) = RecUpdate (id ()) (forgetLExp exp) (fmap (forgetLFieldUpdate) fieldUpdate)
forgetLExp (EnumFrom l exp) = EnumFrom (id ()) (forgetLExp exp)
forgetLExp (EnumFromTo l exp1 exp2) = EnumFromTo (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (EnumFromThen l exp1 exp2) = EnumFromThen (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (EnumFromThenTo l exp1 exp2 exp3) = EnumFromThenTo (id ()) (forgetLExp exp1) (forgetLExp exp2) (forgetLExp exp3)
forgetLExp (ParArrayFromTo l exp1 exp2) = ParArrayFromTo (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (ParArrayFromThenTo l exp1 exp2 exp3) = ParArrayFromThenTo (id ()) (forgetLExp exp1) (forgetLExp exp2) (forgetLExp exp3)
forgetLExp (ListComp l exp qualStmt) = ListComp (id ()) (forgetLExp exp) (fmap (forgetLQualStmt) qualStmt)
forgetLExp (ParComp l exp qualStmt) = ParComp (id ()) (forgetLExp exp) (fmap (fmap (forgetLQualStmt)) qualStmt)
forgetLExp (ParArrayComp l exp qualStmt) = ParArrayComp (id ()) (forgetLExp exp) (fmap (fmap (forgetLQualStmt)) qualStmt)
forgetLExp (ExpTypeSig l exp type0) = ExpTypeSig (id ()) (forgetLExp exp) (forgetLType type0)
forgetLExp (VarQuote l qName) = VarQuote (id ()) (forgetLQName qName)
forgetLExp (TypQuote l qName) = TypQuote (id ()) (forgetLQName qName)
forgetLExp (BracketExp l bracket) = BracketExp (id ()) (forgetLBracket bracket)
forgetLExp (SpliceExp l splice) = SpliceExp (id ()) (forgetLSplice splice)
forgetLExp (QuasiQuote l string1 string2) = QuasiQuote (id ()) (id string1) (id string2)
forgetLExp (XTag l xName xAttr exp1 exp2) = XTag (id ()) (forgetLXName xName) (fmap (forgetLXAttr) xAttr) (fmap (forgetLExp) exp1) (fmap (forgetLExp) exp2)
forgetLExp (XETag l xName xAttr exp) = XETag (id ()) (forgetLXName xName) (fmap (forgetLXAttr) xAttr) (fmap (forgetLExp) exp)
forgetLExp (XPcdata l string) = XPcdata (id ()) (id string)
forgetLExp (XExpTag l exp) = XExpTag (id ()) (forgetLExp exp)
forgetLExp (XChildTag l exp) = XChildTag (id ()) (fmap (forgetLExp) exp)
forgetLExp (CorePragma l string exp) = CorePragma (id ()) (id string) (forgetLExp exp)
forgetLExp (SCCPragma l string exp) = SCCPragma (id ()) (id string) (forgetLExp exp)
forgetLExp (GenPragma l string int1 int2 exp) = GenPragma (id ()) (id string) (((id) *** (id)) int1) (((id) *** (id)) int2) (forgetLExp exp)
forgetLExp (Proc l pat exp) = Proc (id ()) (forgetLPat pat) (forgetLExp exp)
forgetLExp (LeftArrApp l exp1 exp2) = LeftArrApp (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (RightArrApp l exp1 exp2) = RightArrApp (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (LeftArrHighApp l exp1 exp2) = LeftArrHighApp (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (RightArrHighApp l exp1 exp2) = RightArrHighApp (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLExp (LCase l alt) = LCase (id ()) (fmap (forgetLAlt) alt)
forgetLExp (ExprHole l) = ExprHole (id ())
forgetLExportSpec :: ExportSpec l -> ExportSpec ()
forgetLExportSpec (EVar l qName) = EVar (id ()) (forgetLQName qName)
forgetLExportSpec (EAbs l namespace qName) = EAbs (id ()) (forgetLNamespace namespace) (forgetLQName qName)
forgetLExportSpec (EThingAll l qName) = EThingAll (id ()) (forgetLQName qName)
forgetLExportSpec (EThingWith l qName cName) = EThingWith (id ()) (forgetLQName qName) (fmap (forgetLCName) cName)
forgetLExportSpec (EModuleContents l moduleName) = EModuleContents (id ()) (forgetLModuleName moduleName)
forgetLExportSpecList :: ExportSpecList l -> ExportSpecList ()
forgetLExportSpecList (ExportSpecList l exportSpec) = ExportSpecList (id ()) (fmap (forgetLExportSpec) exportSpec)
forgetLFieldDecl :: FieldDecl l -> FieldDecl ()
forgetLFieldDecl (FieldDecl l name type0) = FieldDecl (id ()) (fmap (forgetLName) name) (forgetLType type0)
forgetLFieldUpdate :: FieldUpdate l -> FieldUpdate ()
forgetLFieldUpdate (FieldUpdate l qName exp) = FieldUpdate (id ()) (forgetLQName qName) (forgetLExp exp)
forgetLFieldUpdate (FieldPun l qName) = FieldPun (id ()) (forgetLQName qName)
forgetLFieldUpdate (FieldWildcard l) = FieldWildcard (id ())
forgetLFunDep :: FunDep l -> FunDep ()
forgetLFunDep (FunDep l name1 name2) = FunDep (id ()) (fmap (forgetLName) name1) (fmap (forgetLName) name2)
forgetLGadtDecl :: GadtDecl l -> GadtDecl ()
forgetLGadtDecl (GadtDecl l name fieldDecl type0) = GadtDecl (id ()) (forgetLName name) (fmap (fmap (forgetLFieldDecl)) fieldDecl) (forgetLType type0)
forgetLGuardedRhs :: GuardedRhs l -> GuardedRhs ()
forgetLGuardedRhs (GuardedRhs l stmt exp) = GuardedRhs (id ()) (fmap (forgetLStmt) stmt) (forgetLExp exp)
forgetLIPBind :: IPBind l -> IPBind ()
forgetLIPBind (IPBind l iPName exp) = IPBind (id ()) (forgetLIPName iPName) (forgetLExp exp)
forgetLIPName :: IPName l -> IPName ()
forgetLIPName (IPDup l string) = IPDup (id ()) (id string)
forgetLIPName (IPLin l string) = IPLin (id ()) (id string)
forgetLImportDecl :: ImportDecl l -> ImportDecl ()
forgetLImportDecl (ImportDecl importAnn importModule importQualified importSrc importSafe importPkg importAs importSpecs) = ImportDecl () (forgetLModuleName importModule) (id importQualified) (id importSrc) (id importSafe) (fmap (id) importPkg) (fmap (forgetLModuleName) importAs) (fmap (forgetLImportSpecList) importSpecs)
forgetLImportSpec :: ImportSpec l -> ImportSpec ()
forgetLImportSpec (IVar l name) = IVar (id ()) (forgetLName name)
forgetLImportSpec (IAbs l namespace name) = IAbs (id ()) (forgetLNamespace namespace) (forgetLName name)
forgetLImportSpec (IThingAll l name) = IThingAll (id ()) (forgetLName name)
forgetLImportSpec (IThingWith l name cName) = IThingWith (id ()) (forgetLName name) (fmap (forgetLCName) cName)
forgetLImportSpecList :: ImportSpecList l -> ImportSpecList ()
forgetLImportSpecList (ImportSpecList l bool importSpec) = ImportSpecList (id ()) (id bool) (fmap (forgetLImportSpec) importSpec)
forgetLInstDecl :: InstDecl l -> InstDecl ()
forgetLInstDecl (InsDecl l decl) = InsDecl (id ()) (forgetLDecl decl)
forgetLInstDecl (InsType l type1 type2) = InsType (id ()) (forgetLType type1) (forgetLType type2)
forgetLInstDecl (InsData l dataOrNew type0 qualConDecl deriving0) = InsData (id ()) (forgetLDataOrNew dataOrNew) (forgetLType type0) (fmap (forgetLQualConDecl) qualConDecl) (fmap (forgetLDeriving) deriving0)
forgetLInstDecl (InsGData l dataOrNew type0 kind gadtDecl deriving0) = InsGData (id ()) (forgetLDataOrNew dataOrNew) (forgetLType type0) (fmap (forgetLKind) kind) (fmap (forgetLGadtDecl) gadtDecl) (fmap (forgetLDeriving) deriving0)
forgetLInstHead :: InstHead l -> InstHead ()
forgetLInstHead (IHCon l qName) = IHCon (id ()) (forgetLQName qName)
forgetLInstHead (IHInfix l type0 qName) = IHInfix (id ()) (forgetLType type0) (forgetLQName qName)
forgetLInstHead (IHParen l instHead) = IHParen (id ()) (forgetLInstHead instHead)
forgetLInstHead (IHApp l instHead type0) = IHApp (id ()) (forgetLInstHead instHead) (forgetLType type0)
forgetLInstRule :: InstRule l -> InstRule ()
forgetLInstRule (IRule l tyVarBind context instHead) = IRule (id ()) (fmap (fmap (forgetLTyVarBind)) tyVarBind) (fmap (forgetLContext) context) (forgetLInstHead instHead)
forgetLInstRule (IParen l instRule) = IParen (id ()) (forgetLInstRule instRule)
forgetLKind :: Kind l -> Kind ()
forgetLKind (KindStar l) = KindStar (id ())
forgetLKind (KindFn l kind1 kind2) = KindFn (id ()) (forgetLKind kind1) (forgetLKind kind2)
forgetLKind (KindParen l kind) = KindParen (id ()) (forgetLKind kind)
forgetLKind (KindVar l qName) = KindVar (id ()) (forgetLQName qName)
forgetLKind (KindApp l kind1 kind2) = KindApp (id ()) (forgetLKind kind1) (forgetLKind kind2)
forgetLKind (KindTuple l kind) = KindTuple (id ()) (fmap (forgetLKind) kind)
forgetLKind (KindList l kind) = KindList (id ()) (forgetLKind kind)
forgetLLiteral :: Literal l -> Literal ()
forgetLLiteral (Char l char string) = Char (id ()) (id char) (id string)
forgetLLiteral (String l string1 string2) = String (id ()) (id string1) (id string2)
forgetLLiteral (Int l integer string) = Int (id ()) (id integer) (id string)
forgetLLiteral (Frac l rational string) = Frac (id ()) (id rational) (id string)
forgetLLiteral (PrimInt l integer string) = PrimInt (id ()) (id integer) (id string)
forgetLLiteral (PrimWord l integer string) = PrimWord (id ()) (id integer) (id string)
forgetLLiteral (PrimFloat l rational string) = PrimFloat (id ()) (id rational) (id string)
forgetLLiteral (PrimDouble l rational string) = PrimDouble (id ()) (id rational) (id string)
forgetLLiteral (PrimChar l char string) = PrimChar (id ()) (id char) (id string)
forgetLLiteral (PrimString l string1 string2) = PrimString (id ()) (id string1) (id string2)
forgetLMatch :: Match l -> Match ()
forgetLMatch (Match l name pat rhs binds) = Match (id ()) (forgetLName name) (fmap (forgetLPat) pat) (forgetLRhs rhs) (fmap (forgetLBinds) binds)
forgetLMatch (InfixMatch l pat1 name pat2 rhs binds) = InfixMatch (id ()) (forgetLPat pat1) (forgetLName name) (fmap (forgetLPat) pat2) (forgetLRhs rhs) (fmap (forgetLBinds) binds)
forgetLModule :: Module l -> Module ()
forgetLModule (Module l moduleHead modulePragma importDecl decl) = Module (id ()) (fmap (forgetLModuleHead) moduleHead) (fmap (forgetLModulePragma) modulePragma) (fmap (forgetLImportDecl) importDecl) (fmap (forgetLDecl) decl)
forgetLModule (XmlPage l moduleName modulePragma xName xAttr exp1 exp2) = XmlPage (id ()) (forgetLModuleName moduleName) (fmap (forgetLModulePragma) modulePragma) (forgetLXName xName) (fmap (forgetLXAttr) xAttr) (fmap (forgetLExp) exp1) (fmap (forgetLExp) exp2)
forgetLModule (XmlHybrid l moduleHead modulePragma importDecl decl xName xAttr exp1 exp2) = XmlHybrid (id ()) (fmap (forgetLModuleHead) moduleHead) (fmap (forgetLModulePragma) modulePragma) (fmap (forgetLImportDecl) importDecl) (fmap (forgetLDecl) decl) (forgetLXName xName) (fmap (forgetLXAttr) xAttr) (fmap (forgetLExp) exp1) (fmap (forgetLExp) exp2)
forgetLModuleHead :: ModuleHead l -> ModuleHead ()
forgetLModuleHead (ModuleHead l moduleName warningText exportSpecList) = ModuleHead (id ()) (forgetLModuleName moduleName) (fmap (forgetLWarningText) warningText) (fmap (forgetLExportSpecList) exportSpecList)
forgetLModuleName :: ModuleName l -> ModuleName ()
forgetLModuleName (ModuleName l string) = ModuleName (id ()) (id string)
forgetLModulePragma :: ModulePragma l -> ModulePragma ()
forgetLModulePragma (LanguagePragma l name) = LanguagePragma (id ()) (fmap (forgetLName) name)
forgetLModulePragma (OptionsPragma l tool string) = OptionsPragma (id ()) (fmap (forgetLTool) tool) (id string)
forgetLModulePragma (AnnModulePragma l annotation) = AnnModulePragma (id ()) (forgetLAnnotation annotation)
forgetLName :: Name l -> Name ()
forgetLName (Ident l string) = Ident (id ()) (id string)
forgetLName (Symbol l string) = Symbol (id ()) (id string)
forgetLNamespace :: Namespace l -> Namespace ()
forgetLNamespace (NoNamespace l) = NoNamespace (id ())
forgetLNamespace (TypeNamespace l) = TypeNamespace (id ())
forgetLNamespace (PatternNamespace l) = PatternNamespace (id ())
forgetLOp :: Op l -> Op ()
forgetLOp (VarOp l name) = VarOp (id ()) (forgetLName name)
forgetLOp (ConOp l name) = ConOp (id ()) (forgetLName name)
forgetLOverlap :: Overlap l -> Overlap ()
forgetLOverlap (NoOverlap l) = NoOverlap (id ())
forgetLOverlap (Overlap l) = Overlap (id ())
forgetLOverlap (Incoherent l) = Incoherent (id ())
forgetLPXAttr :: PXAttr l -> PXAttr ()
forgetLPXAttr (PXAttr l xName pat) = PXAttr (id ()) (forgetLXName xName) (forgetLPat pat)
forgetLPat :: Pat l -> Pat ()
forgetLPat (PVar l name) = PVar (id ()) (forgetLName name)
forgetLPat (PLit l sign literal) = PLit (id ()) (forgetLSign sign) (forgetLLiteral literal)
forgetLPat (PNPlusK l name integer) = PNPlusK (id ()) (forgetLName name) (id integer)
forgetLPat (PInfixApp l pat1 qName pat2) = PInfixApp (id ()) (forgetLPat pat1) (forgetLQName qName) (forgetLPat pat2)
forgetLPat (PApp l qName pat) = PApp (id ()) (forgetLQName qName) (fmap (forgetLPat) pat)
forgetLPat (PTuple l boxed pat) = PTuple (id ()) (forgetLBoxed boxed) (fmap (forgetLPat) pat)
forgetLPat (PList l pat) = PList (id ()) (fmap (forgetLPat) pat)
forgetLPat (PParen l pat) = PParen (id ()) (forgetLPat pat)
forgetLPat (PRec l qName patField) = PRec (id ()) (forgetLQName qName) (fmap (forgetLPatField) patField)
forgetLPat (PAsPat l name pat) = PAsPat (id ()) (forgetLName name) (forgetLPat pat)
forgetLPat (PWildCard l) = PWildCard (id ())
forgetLPat (PIrrPat l pat) = PIrrPat (id ()) (forgetLPat pat)
forgetLPat (PatTypeSig l pat type0) = PatTypeSig (id ()) (forgetLPat pat) (forgetLType type0)
forgetLPat (PViewPat l exp pat) = PViewPat (id ()) (forgetLExp exp) (forgetLPat pat)
forgetLPat (PRPat l rPat) = PRPat (id ()) (fmap (forgetLRPat) rPat)
forgetLPat (PXTag l xName pXAttr pat1 pat2) = PXTag (id ()) (forgetLXName xName) (fmap (forgetLPXAttr) pXAttr) (fmap (forgetLPat) pat1) (fmap (forgetLPat) pat2)
forgetLPat (PXETag l xName pXAttr pat) = PXETag (id ()) (forgetLXName xName) (fmap (forgetLPXAttr) pXAttr) (fmap (forgetLPat) pat)
forgetLPat (PXPcdata l string) = PXPcdata (id ()) (id string)
forgetLPat (PXPatTag l pat) = PXPatTag (id ()) (forgetLPat pat)
forgetLPat (PXRPats l rPat) = PXRPats (id ()) (fmap (forgetLRPat) rPat)
forgetLPat (PQuasiQuote l string1 string2) = PQuasiQuote (id ()) (id string1) (id string2)
forgetLPat (PBangPat l pat) = PBangPat (id ()) (forgetLPat pat)
forgetLPatField :: PatField l -> PatField ()
forgetLPatField (PFieldPat l qName pat) = PFieldPat (id ()) (forgetLQName qName) (forgetLPat pat)
forgetLPatField (PFieldPun l qName) = PFieldPun (id ()) (forgetLQName qName)
forgetLPatField (PFieldWildcard l) = PFieldWildcard (id ())
forgetLPatternSynDirection :: PatternSynDirection l -> PatternSynDirection ()
forgetLPatternSynDirection (Unidirectional) = Unidirectional
forgetLPatternSynDirection (ImplicitBidirectional) = ImplicitBidirectional
forgetLPatternSynDirection (ExplicitBidirectional l decl) = ExplicitBidirectional (id ()) (fmap (forgetLDecl) decl)
forgetLPromoted :: Promoted l -> Promoted ()
forgetLPromoted (PromotedInteger l integer string) = PromotedInteger (id ()) (id integer) (id string)
forgetLPromoted (PromotedString l string1 string2) = PromotedString (id ()) (id string1) (id string2)
forgetLPromoted (PromotedCon l bool qName) = PromotedCon (id ()) (id bool) (forgetLQName qName)
forgetLPromoted (PromotedList l bool type0) = PromotedList (id ()) (id bool) (fmap (forgetLType) type0)
forgetLPromoted (PromotedTuple l type0) = PromotedTuple (id ()) (fmap (forgetLType) type0)
forgetLPromoted (PromotedUnit l) = PromotedUnit (id ())
forgetLQName :: QName l -> QName ()
forgetLQName (Qual l moduleName name) = Qual (id ()) (forgetLModuleName moduleName) (forgetLName name)
forgetLQName (UnQual l name) = UnQual (id ()) (forgetLName name)
forgetLQName (Special l specialCon) = Special (id ()) (forgetLSpecialCon specialCon)
forgetLQOp :: QOp l -> QOp ()
forgetLQOp (QVarOp l qName) = QVarOp (id ()) (forgetLQName qName)
forgetLQOp (QConOp l qName) = QConOp (id ()) (forgetLQName qName)
forgetLQualConDecl :: QualConDecl l -> QualConDecl ()
forgetLQualConDecl (QualConDecl l tyVarBind context conDecl) = QualConDecl (id ()) (fmap (fmap (forgetLTyVarBind)) tyVarBind) (fmap (forgetLContext) context) (forgetLConDecl conDecl)
forgetLQualStmt :: QualStmt l -> QualStmt ()
forgetLQualStmt (QualStmt l stmt) = QualStmt (id ()) (forgetLStmt stmt)
forgetLQualStmt (ThenTrans l exp) = ThenTrans (id ()) (forgetLExp exp)
forgetLQualStmt (ThenBy l exp1 exp2) = ThenBy (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLQualStmt (GroupBy l exp) = GroupBy (id ()) (forgetLExp exp)
forgetLQualStmt (GroupUsing l exp) = GroupUsing (id ()) (forgetLExp exp)
forgetLQualStmt (GroupByUsing l exp1 exp2) = GroupByUsing (id ()) (forgetLExp exp1) (forgetLExp exp2)
forgetLRPat :: RPat l -> RPat ()
forgetLRPat (RPOp l rPat rPatOp) = RPOp (id ()) (forgetLRPat rPat) (forgetLRPatOp rPatOp)
forgetLRPat (RPEither l rPat1 rPat2) = RPEither (id ()) (forgetLRPat rPat1) (forgetLRPat rPat2)
forgetLRPat (RPSeq l rPat) = RPSeq (id ()) (fmap (forgetLRPat) rPat)
forgetLRPat (RPGuard l pat stmt) = RPGuard (id ()) (forgetLPat pat) (fmap (forgetLStmt) stmt)
forgetLRPat (RPCAs l name rPat) = RPCAs (id ()) (forgetLName name) (forgetLRPat rPat)
forgetLRPat (RPAs l name rPat) = RPAs (id ()) (forgetLName name) (forgetLRPat rPat)
forgetLRPat (RPParen l rPat) = RPParen (id ()) (forgetLRPat rPat)
forgetLRPat (RPPat l pat) = RPPat (id ()) (forgetLPat pat)
forgetLRPatOp :: RPatOp l -> RPatOp ()
forgetLRPatOp (RPStar l) = RPStar (id ())
forgetLRPatOp (RPStarG l) = RPStarG (id ())
forgetLRPatOp (RPPlus l) = RPPlus (id ())
forgetLRPatOp (RPPlusG l) = RPPlusG (id ())
forgetLRPatOp (RPOpt l) = RPOpt (id ())
forgetLRPatOp (RPOptG l) = RPOptG (id ())
forgetLRhs :: Rhs l -> Rhs ()
forgetLRhs (UnGuardedRhs l exp) = UnGuardedRhs (id ()) (forgetLExp exp)
forgetLRhs (GuardedRhss l guardedRhs) = GuardedRhss (id ()) (fmap (forgetLGuardedRhs) guardedRhs)
forgetLRole :: Role l -> Role ()
forgetLRole (Nominal l) = Nominal (id ())
forgetLRole (Representational l) = Representational (id ())
forgetLRole (Phantom l) = Phantom (id ())
forgetLRole (RoleWildcard l) = RoleWildcard (id ())
forgetLRule :: Rule l -> Rule ()
forgetLRule (Rule l string activation ruleVar exp1 exp2) = Rule (id ()) (id string) (fmap (forgetLActivation) activation) (fmap (fmap (forgetLRuleVar)) ruleVar) (forgetLExp exp1) (forgetLExp exp2)
forgetLRuleVar :: RuleVar l -> RuleVar ()
forgetLRuleVar (RuleVar l name) = RuleVar (id ()) (forgetLName name)
forgetLRuleVar (TypedRuleVar l name type0) = TypedRuleVar (id ()) (forgetLName name) (forgetLType type0)
forgetLSafety :: Safety l -> Safety ()
forgetLSafety (PlayRisky l) = PlayRisky (id ())
forgetLSafety (PlaySafe l bool) = PlaySafe (id ()) (id bool)
forgetLSafety (PlayInterruptible l) = PlayInterruptible (id ())
forgetLSign :: Sign l -> Sign ()
forgetLSign (Signless l) = Signless (id ())
forgetLSign (Negative l) = Negative (id ())
forgetLSpecialCon :: SpecialCon l -> SpecialCon ()
forgetLSpecialCon (UnitCon l) = UnitCon (id ())
forgetLSpecialCon (ListCon l) = ListCon (id ())
forgetLSpecialCon (FunCon l) = FunCon (id ())
forgetLSpecialCon (TupleCon l boxed int) = TupleCon (id ()) (forgetLBoxed boxed) (id int)
forgetLSpecialCon (Cons l) = Cons (id ())
forgetLSpecialCon (UnboxedSingleCon l) = UnboxedSingleCon (id ())
forgetLSplice :: Splice l -> Splice ()
forgetLSplice (IdSplice l string) = IdSplice (id ()) (id string)
forgetLSplice (ParenSplice l exp) = ParenSplice (id ()) (forgetLExp exp)
forgetLStmt :: Stmt l -> Stmt ()
forgetLStmt (Generator l pat exp) = Generator (id ()) (forgetLPat pat) (forgetLExp exp)
forgetLStmt (Qualifier l exp) = Qualifier (id ()) (forgetLExp exp)
forgetLStmt (LetStmt l binds) = LetStmt (id ()) (forgetLBinds binds)
forgetLStmt (RecStmt l stmt) = RecStmt (id ()) (fmap (forgetLStmt) stmt)
forgetLTool :: Tool -> Tool
forgetLTool (GHC) = GHC
forgetLTool (HUGS) = HUGS
forgetLTool (NHC98) = NHC98
forgetLTool (YHC) = YHC
forgetLTool (HADDOCK) = HADDOCK
forgetLTool (UnknownTool string) = UnknownTool (id string)
forgetLTyVarBind :: TyVarBind l -> TyVarBind ()
forgetLTyVarBind (KindedVar l name kind) = KindedVar (id ()) (forgetLName name) (forgetLKind kind)
forgetLTyVarBind (UnkindedVar l name) = UnkindedVar (id ()) (forgetLName name)
forgetLType :: Type l -> Type ()
forgetLType (TyForall l tyVarBind context type0) = TyForall (id ()) (fmap (fmap (forgetLTyVarBind)) tyVarBind) (fmap (forgetLContext) context) (forgetLType type0)
forgetLType (TyFun l type1 type2) = TyFun (id ()) (forgetLType type1) (forgetLType type2)
forgetLType (TyTuple l boxed type0) = TyTuple (id ()) (forgetLBoxed boxed) (fmap (forgetLType) type0)
forgetLType (TyList l type0) = TyList (id ()) (forgetLType type0)
forgetLType (TyParArray l type0) = TyParArray (id ()) (forgetLType type0)
forgetLType (TyApp l type1 type2) = TyApp (id ()) (forgetLType type1) (forgetLType type2)
forgetLType (TyVar l name) = TyVar (id ()) (forgetLName name)
forgetLType (TyCon l qName) = TyCon (id ()) (forgetLQName qName)
forgetLType (TyParen l type0) = TyParen (id ()) (forgetLType type0)
forgetLType (TyInfix l type1 qName type2) = TyInfix (id ()) (forgetLType type1) (forgetLQName qName) (forgetLType type2)
forgetLType (TyKind l type0 kind) = TyKind (id ()) (forgetLType type0) (forgetLKind kind)
forgetLType (TyPromoted l promoted) = TyPromoted (id ()) (forgetLPromoted promoted)
forgetLType (TyEquals l type1 type2) = TyEquals (id ()) (forgetLType type1) (forgetLType type2)
forgetLType (TySplice l splice) = TySplice (id ()) (forgetLSplice splice)
forgetLType (TyBang l bangType type0) = TyBang (id ()) (forgetLBangType bangType) (forgetLType type0)
forgetLType (TyWildCard l name) = TyWildCard (id ()) (fmap (forgetLName) name)
forgetLTypeEqn :: TypeEqn l -> TypeEqn ()
forgetLTypeEqn (TypeEqn l type1 type2) = TypeEqn (id ()) (forgetLType type1) (forgetLType type2)
forgetLWarningText :: WarningText l -> WarningText ()
forgetLWarningText (DeprText l string) = DeprText (id ()) (id string)
forgetLWarningText (WarnText l string) = WarnText (id ()) (id string)
forgetLXAttr :: XAttr l -> XAttr ()
forgetLXAttr (XAttr l xName exp) = XAttr (id ()) (forgetLXName xName) (forgetLExp exp)
forgetLXName :: XName l -> XName ()
forgetLXName (XName l string) = XName (id ()) (id string)
forgetLXName (XDomName l string1 string2) = XDomName (id ()) (id string1) (id string2)

